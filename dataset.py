import requests
import cv2
import os
import time
from typing import Optional, Dict, List

BASE_URL = "http://127.0.0.1:2336"
TIMEOUT = 3  # —Å–µ–∫
TARGET_FPS = 3


def get_signal_quality(device_index: int = 0) -> Optional[List[int]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    try:
        response = requests.get(
            f"{BASE_URL}/currentDevicesInfo",
            timeout=TIMEOUT
        )
        if response.status_code != 200:
            print(f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            return None
        data = response.json()
        if not isinstance(data, dict):
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
            return None
        devices = data.get("devices", [])
        if not devices:
            print("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return None
        if len(devices) <= device_index:
            print(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –∏–Ω–¥–µ–∫—Å–æ–º {device_index} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None
        quality = devices[device_index].get("quality")
        if quality is None:
            print("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–≥–Ω–∞–ª–∞")
            return None
        return quality
    except requests.exceptions.Timeout:
        print("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞")
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    return None


def get_concentration_with_quality_check() -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å–∏–≥–Ω–∞–ª–µ"""
    quality = get_signal_quality()
    quality[1] = 100
    quality[4] = 100
    if quality is None:
        print("–û—à–∏–±–∫–∞ 1")
        return None
    print(f"üì∂ –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: {quality}")
    if not all(q >= 80 for q in quality):
        bad_channels = [i for i, q in enumerate(quality) if q < 80]
        print(f"–ü–ª–æ—Ö–æ–π —Å–∏–≥–Ω–∞–ª –≤ –∫–∞–Ω–∞–ª–∞—Ö: {bad_channels}")
        return None
    try:
        response = requests.get(
            f"{BASE_URL}/concentration",
            timeout=TIMEOUT
        )
        data = response.json()
        if data.get("concentration") == -1:
            print("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return None
        print(f"–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {data.get('concentration')}%")
        return data
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤
if not os.path.exists('data'):
    os.makedirs('data')
for n in range(3):
    dir_name = f"{n + 1}"
    dir_path = os.path.join('data', dir_name)
    if not os.path.exists(dir_path):
        os.makedirs(dir_path)

video = cv2.VideoCapture(0)

frame_interval = 1.0 / TARGET_FPS
last_capture_time = time.time()

while True:
    success, frame = video.read()
    if not success:
        break

    current_time = time.time()
    result = get_concentration_with_quality_check()

    if current_time - last_capture_time >= frame_interval and result:
        # –ü–æ–ª—É—á–∞–µ–º 13-–∑–Ω–∞—á–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã —Å —ç–ø–æ—Ö–∏ Unix)
        timestamp = int(current_time * 1000)

        print(result['concentration'])
        dir_number = result['concentration'] % 10 + 1
        if result['concentration'] >= 0 and  result['concentration'] <= 30:
            dir_number = 1
        elif result['concentration'] > 30 and result['concentration'] <= 60:
            dir_number = 2
        elif result['concentration'] > 60:
            dir_number = 3
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å timestamp –≤–º–µ—Å—Ç–æ frame_count
        cv2.imwrite(f'data/{dir_number}/frame_{timestamp}.jpg', frame)
        last_capture_time = current_time

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ FPS (–æ—Å—Ç–∞–≤–∏–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
        if int(timestamp / 1000) % 1 == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            elapsed = current_time - (last_capture_time - frame_interval * TARGET_FPS)
            actual_fps = TARGET_FPS / elapsed
            print(f"Current FPS: {actual_fps:.2f}")

    cv2.imshow(f'Camera Feed ({TARGET_FPS} FPS limit)', frame)

    # –í—ã—Ö–æ–¥ –ø–æ –Ω–∞–∂–∞—Ç–∏—é 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

video.release()
cv2.destroyAllWindows()
print('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã')
