import requests
import cv2
import os
import time
import mediapipe as mp
import numpy as np
from typing import Optional, Dict, List

'''–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–µ–π—Ä–æ–≥–∞—Ä–Ω–∏—Ç—É—Ä—ã –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞'''

BASE_URL = "http://127.0.0.1:2336"
TIMEOUT = 3  # —Å–µ–∫
TARGET_FPS = 1
DELAY = 1.7  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –≠–≠–ì
DISK = 'D:'
MAIN_FOLDER = os.path.join(DISK, 'data_delay_bi')
if not os.path.exists(MAIN_FOLDER):
    os.makedirs(MAIN_FOLDER)
for n in range(2):
    dir_name = f"{n}"
    dir_path = os.path.join(MAIN_FOLDER, dir_name)
    if not os.path.exists(dir_path):
        os.makedirs(dir_path)


class FaceExpressionDetector:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe
        mp_face_mesh = mp.solutions.face_mesh
        self.face_mesh = mp_face_mesh.FaceMesh(
            max_num_faces=1,
            refine_landmarks=True,
            min_detection_confidence=0.5,
            min_tracking_confidence=0.5
        )
        self.smile_buffer = []
        self.mouth_open_buffer = []
        self.buffer_size = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    def detect_expression(self, frame, threshold_smile=0.1, threshold_mouth_open=0.2):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –ª–∏—Ü–∞ –ø–æ –∫–∞–¥—Ä—É"""
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        frame = cv2.normalize(frame, None, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX)
        frame = cv2.GaussianBlur(frame, (5, 5), 0)

        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        results = self.face_mesh.process(frame_rgb)

        if results.multi_face_landmarks:
            landmarks = results.multi_face_landmarks[0].landmark

            # –¢–æ—á–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª—ã–±–∫–∏
            mouth_left = np.array([landmarks[61].x, landmarks[61].y])
            mouth_right = np.array([landmarks[291].x, landmarks[291].y])
            mouth_width = np.linalg.norm(mouth_left - mouth_right)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∑—Ä–∞—á–∫–∞–º–∏
            left_pupil = np.array([landmarks[468].x, landmarks[468].y])
            right_pupil = np.array([landmarks[473].x, landmarks[473].y])
            pupil_distance = np.linalg.norm(left_pupil - right_pupil)

            # –†–∞—Å—á–µ—Ç —É–ª—ã–±–∫–∏
            smile_ratio = mouth_width / pupil_distance
            is_smiling = smile_ratio > (1.3 + threshold_smile)

            # –¢–æ—á–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä—Ç–∞
            mouth_upper = np.mean([landmarks[i].y for i in [13, 312]])
            mouth_lower = np.mean([landmarks[i].y for i in [14, 316]])
            mouth_height = mouth_lower - mouth_upper

            mouth_open_ratio = mouth_height / pupil_distance
            is_mouth_open = mouth_open_ratio > threshold_mouth_open

            # –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
            self.smile_buffer.append(is_smiling)
            self.mouth_open_buffer.append(is_mouth_open)
            if len(self.smile_buffer) > self.buffer_size:
                self.smile_buffer.pop(0)
                self.mouth_open_buffer.pop(0)

            return all(self.smile_buffer) or all(self.mouth_open_buffer)
        return False


def get_signal_quality(device_index: int = 0) -> Optional[List[int]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    try:
        response = requests.get(
            f"{BASE_URL}/currentDevicesInfo",
            timeout=TIMEOUT
        )
        if response.status_code != 200:
            print(f"–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            return None
        data = response.json()
        if not isinstance(data, dict):
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
            return None
        devices = data.get("devices", [])
        if not devices:
            print("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return None
        if len(devices) <= device_index:
            print(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –∏–Ω–¥–µ–∫—Å–æ–º {device_index} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None
        quality = devices[device_index].get("quality")
        if quality is None:
            print("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–∏–≥–Ω–∞–ª–∞")
            return None
        return quality
    except requests.exceptions.Timeout:
        print("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞")
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    return None


def get_concentration_with_quality_check() -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º —Å–∏–≥–Ω–∞–ª–µ"""
    quality = get_signal_quality()
    if quality is None:
        print("–û—à–∏–±–∫–∞ 1")
        return None
    print(f"üì∂ –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: {quality}")
    if not all(q >= 80 for q in quality):
        bad_channels = [i for i, q in enumerate(quality) if q < 80]
        print(f"–ü–ª–æ—Ö–æ–π —Å–∏–≥–Ω–∞–ª –≤ –∫–∞–Ω–∞–ª–∞—Ö: {bad_channels}")
        return None
    try:
        response = requests.get(
            f"{BASE_URL}/concentration",
            timeout=TIMEOUT
        )
        data = response.json()
        if data.get("concentration") == -1:
            print("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return None
        print(f"–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è: {data.get('concentration')}%")
        return data
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


video = cv2.VideoCapture(0)

frame_interval = 1.0 / TARGET_FPS
last_capture_time = time.time()
frame_buffer = []  # –ë—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
if not os.path.exists('data_delay_bi'):
    os.makedirs('data_delay_bi')
for n in range(2):
    dir_name = f'{n}'
    dir_path = os.path.join('data_delay_bi', dir_name)
    if not os.path.exists(dir_path):
        os.makedirs(dir_path)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –ª–∏—Ü–∞
expression_detector = FaceExpressionDetector()

while True:
    success, frame = video.read()
    if not success:
        break

    current_time = time.time()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞
    expression = expression_detector.detect_expression(frame)
    print(f"–í—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞: {'–£–ª—ã–±–∫–∞/–æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–æ—Ç' if expression else '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä –≤ –±—É—Ñ–µ—Ä —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ –ª–∏—Ü–∞
    frame_buffer.append((frame, current_time, expression))

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞–¥—Ä—ã –∏–∑ –±—É—Ñ–µ—Ä–∞ (—Å—Ç–∞—Ä—à–µ DELAY + frame_interval)
    while frame_buffer and current_time - frame_buffer[0][1] > DELAY + frame_interval:
        frame_buffer.pop(0)

    result = get_concentration_with_quality_check()

    if result and current_time - last_capture_time >= frame_interval and result['concentration'] > 0:
        # –ò—â–µ–º –∫–∞–¥—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞—Ö–≤–∞—á–µ–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ DELAY —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
        target_time = current_time - DELAY
        closest_frame = None
        closest_expression = False
        min_diff = float('inf')

        timestamp = int(current_time * 1000)

        for f, t, expr in frame_buffer:
            diff = abs(t - target_time)
            if diff < min_diff:
                min_diff = diff
                closest_frame = f
                closest_expression = expr

        if closest_frame is not None:
            # –ü–æ–ª—É—á–∞–µ–º 13-–∑–Ω–∞—á–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            timestamp = int(target_time * 1000)
            last_capture_time = current_time

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ FPS (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
            if int(timestamp / 1000) % 1 == 0:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                elapsed = current_time - (last_capture_time - frame_interval * TARGET_FPS)
                actual_fps = TARGET_FPS / elapsed

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            if (result["concentration"] >= 1 and result["concentration"] <= 50) or closest_expression:
                cv2.imwrite(
                    f'data_delay_bi/0/{timestamp}_{result["concentration"]}_{int(closest_expression)}.jpg',
                    closest_frame)
            elif result["concentration"] >= 71 and not closest_expression:
                cv2.imwrite(
                    f'data_delay_bi/1/{timestamp}_{result["concentration"]}_{int(closest_expression)}.jpg',
                    closest_frame)

            try:
                cv2.putText(closest_frame, f'Concentration ({result["concentration"]}%)', (10, 90),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                cv2.putText(closest_frame, f'Expression: {"Smile/Open" if closest_expression else "Neutral"}',
                            (10, 120),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            except:
                cv2.putText(closest_frame, 'err', (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            cv2.imshow('Concentration', closest_frame)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)
    cv2.imshow('Live Feed', frame)

    # –í—ã—Ö–æ–¥ –ø–æ –Ω–∞–∂–∞—Ç–∏—é 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

video.release()
cv2.destroyAllWindows()
print('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã')
